from typing import Any, Callable

class Doc:
    """Shared document."""

    def create_transaction(self) -> Transaction:
        """Create a document transaction."""
    def get_or_insert_text(self, name: str) -> Text:
        """Create a text root type on this document, or get an existing one."""
    def get_or_insert_array(self, name: str) -> Array:
        """Create an array root type on this document, or get an existing one."""
    def get_or_insert_map(self, name: str) -> Map:
        """Create a map root type on this document, or get an existing one."""
    def get_state(self) -> bytes:
        """Get the current document state."""
    def get_update(self, state: bytes) -> bytes:
        """Get the update from the given state to the current state."""
    def apply_update(self, update: bytes) -> None:
        """Apply the update to the document."""

class Transaction:
    """Document transaction"""

    def drop(self) -> None:
        """Drop the transaction, effectively committing document changes."""
    def commit(self) -> None:
        """Commit the document changes."""

class Text:
    """Shared text."""

    def len(self, txn: Transaction) -> int:
        """Returns the number of characters visible in the current text structure."""
    def push(self, txn: Transaction, chunk: str) -> None:
        """Appends a given `chunk` of text at the end of the current text structure."""
    def insert(self, txn: Transaction, index: int, chunk: str) -> None:
        """Inserts a `chunk` of text at a given `index`."""
    def remove_range(self, txn: Transaction, index: int, len: int) -> None:
        """Removes up to `len` characters from th current text structure, starting at
        given`index`."""
    def observe(self, callback: Callable[[TextEvent], None]) -> int:
        """Subscribes a callback to be called with the text structure change event.
        Returns a subscription ID that can be used to unsubscribe."""
    def unobserve(self, subscription_id: int) -> None:
        """Unsubscribes previously subscribed event callback identified by given
        `subscription_id`."""

class TextEvent:
    """Event generated by `Text.observe` method. Emitted during transaction commit
    phase."""

class ArrayEvent:
    """Event generated by `Array.observe` method. Emitted during transaction commit
    phase."""

class MapEvent:
    """Event generated by `Map.observe` method. Emitted during transaction commit
    phase."""

class Array:
    """Shared array."""

    def len(self, txn: Transaction) -> int:
        """Returns the number of elements in the current array."""
    def push_back(self, txn: Transaction, value: Any) -> None:
        """Inserts given `value` at the end of the current array."""
    def push_front(self, txn: Transaction, value: Any) -> None:
        """Inserts given `value` at the beginning of the current array."""
    def insert_range(self, txn: Transaction, index: int, values: list[Any]) -> None:
        """Inserts multiple `values` at the given `index`."""
    def remove(self, txn: Transaction, index: int) -> None:
        """Removes a single element at provided `index`."""
    def remove_range(self, txn: Transaction, index: int, len: int) -> None:
        """Removes 'len' elements starting at provided `index`."""
    def get(self, txn: Transaction, index: int) -> Any:
        """Retrieves a value stored at a given `index`."""
    def to_json(self, txn: Transaction) -> str:
        """Returns a JSON representation of the current array."""

class Map:
    """Shared map."""

    def len(self, txn: Transaction) -> int:
        """Returns a number of characters visible in a current text data structure."""
    def get(self, txn: Transaction, key: str) -> Any:
        """Retrieves a value stored under a given `key`."""
